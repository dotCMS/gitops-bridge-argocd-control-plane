{{- if and .Values.certificates.externalSecrets.enabled .Values.certificates.bootstrap.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: linkerd-cert-bootstrap-{{ .Values.certificates.bootstrap.version | default "v1" }}
  namespace: linkerd
  labels:
    {{- include "linkerd-control-plane.labels" . | nindent 4 }}
    component: certificate-bootstrap
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    metadata:
      labels:
        app: linkerd-cert-bootstrap
    spec:
      serviceAccountName: linkerd-cert-rotation
      restartPolicy: Never
      initContainers:
      # Check if certificates already exist
      - name: cert-checker
        image: amazon/aws-cli:latest
        env:
        - name: AWS_REGION
          value: {{ .Values.aws.region | quote }}
        - name: SECRET_NAME
          value: {{ .Values.certificates.externalSecrets.secretName | quote }}
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Checking if certificates already exist..."

          # Try to get the secret
          if aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --region "$AWS_REGION" > /tmp/secret.json 2>/dev/null; then
            # Check if it contains actual certificates (not placeholders)
            if grep -q "PLACEHOLDER" /tmp/secret.json; then
              echo "Found placeholder certificates, need to generate real ones"
              exit 0
            elif jq -e '.SecretString | fromjson | .trustAnchor | test("-----BEGIN CERTIFICATE-----")' /tmp/secret.json > /dev/null; then
              echo "Valid certificates already exist, skipping generation"
              exit 1
            else
              echo "Invalid certificate format, need to regenerate"
              exit 0
            fi
          else
            echo "Secret not found, need to generate certificates"
            exit 0
          fi
        resources:
          limits:
            cpu: 50m
            memory: 64Mi
          requests:
            cpu: 25m
            memory: 32Mi
      containers:
      - name: cert-generator
        image: smallstep/step-cli:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: AWS_REGION
          value: {{ .Values.aws.region | quote }}
        - name: SECRET_NAME
          value: {{ .Values.certificates.externalSecrets.secretName | quote }}
        - name: ENVIRONMENT
          value: {{ .Values.environment | default "default" | quote }}
        command:
        - /bin/sh
        - -c
        - |
          set -euo pipefail

          echo "Generating initial Linkerd certificates..."

          # Create temporary directory
          CERT_DIR=$(mktemp -d)
          cd "$CERT_DIR"

          # Generate root certificate (trust anchor)
          echo "Generating root certificate..."
          step certificate create root.linkerd.cluster.local ca.crt ca.key \
              --profile root-ca --no-password --insecure

          # Generate identity issuer certificate
          echo "Generating identity issuer certificate..."
          step certificate create identity.linkerd.cluster.local issuer.crt issuer.key \
              --profile intermediate-ca --not-after 8760h --no-password --insecure \
              --ca ca.crt --ca-key ca.key

          # Verify certificate chain
          echo "Verifying certificate chain..."
          step certificate verify issuer.crt --roots ca.crt

          # Prepare certificate data for AWS Secrets Manager
          TRUST_ANCHOR=$(cat ca.crt)
          CERTIFICATE=$(cat issuer.crt)
          PRIVATE_KEY=$(cat issuer.key)

          # Create JSON for AWS Secrets Manager
          SECRET_VALUE=$(jq -n \
              --arg trustAnchor "$TRUST_ANCHOR" \
              --arg certificate "$CERTIFICATE" \
              --arg privateKey "$PRIVATE_KEY" \
              '{
                  trustAnchor: $trustAnchor,
                  certificate: $certificate,
                  privateKey: $privateKey
              }')

          # Update secret in AWS Secrets Manager
          echo "Storing certificates in AWS Secrets Manager..."
          aws secretsmanager update-secret \
              --secret-id "$SECRET_NAME" \
              --secret-string "$SECRET_VALUE" \
              --region "$AWS_REGION"

          echo "Certificate bootstrap completed successfully"

          # Clean up
          rm -rf "$CERT_DIR"
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
      ttlSecondsAfterFinished: 300  # Clean up after 5 minutes
{{- end }}