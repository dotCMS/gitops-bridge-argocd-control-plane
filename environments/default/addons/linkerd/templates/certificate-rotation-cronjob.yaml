{{- if and .Values.certificates.externalSecrets.enabled .Values.certificates.rotation.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: linkerd-cert-rotation
  namespace: linkerd
  labels:
    {{- include "linkerd-control-plane.labels" . | nindent 4 }}
    component: certificate-rotation
spec:
  # Run monthly (1st day of month at 2 AM)
  schedule: "0 2 1 * *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: linkerd-cert-rotation
        spec:
          serviceAccountName: linkerd-cert-rotation
          restartPolicy: OnFailure
          containers:
          - name: cert-rotator
            image: smallstep/step-cli:latest
            imagePullPolicy: IfNotPresent
            env:
            - name: AWS_REGION
              value: {{ .Values.aws.region | quote }}
            - name: SECRET_NAME
              value: {{ .Values.certificates.externalSecrets.secretName | quote }}
            - name: ENVIRONMENT
              value: {{ .Values.environment | default "default" | quote }}
            command:
            - /bin/sh
            - -c
            - |
              set -euo pipefail

              echo "Starting Linkerd certificate rotation..."

              # Create temporary directory
              CERT_DIR=$(mktemp -d)
              cd "$CERT_DIR"

              # Generate new root certificate
              step certificate create root.linkerd.cluster.local ca.crt ca.key \
                  --profile root-ca --no-password --insecure

              # Generate new identity issuer certificate
              step certificate create identity.linkerd.cluster.local issuer.crt issuer.key \
                  --profile intermediate-ca --not-after 8760h --no-password --insecure \
                  --ca ca.crt --ca-key ca.key

              # Verify certificate chain
              step certificate verify issuer.crt --roots ca.crt

              # Prepare certificate data for AWS Secrets Manager
              TRUST_ANCHOR=$(cat ca.crt)
              CERTIFICATE=$(cat issuer.crt)
              PRIVATE_KEY=$(cat issuer.key)

              # Create JSON for AWS Secrets Manager using jq
              SECRET_VALUE=$(jq -n \
                  --arg trustAnchor "$TRUST_ANCHOR" \
                  --arg certificate "$CERTIFICATE" \
                  --arg privateKey "$PRIVATE_KEY" \
                  '{
                      trustAnchor: $trustAnchor,
                      certificate: $certificate,
                      privateKey: $privateKey
                  }')

              # Update secret in AWS Secrets Manager
              aws secretsmanager update-secret \
                  --secret-id "$SECRET_NAME" \
                  --secret-string "$SECRET_VALUE" \
                  --region "$AWS_REGION"

              echo "Certificate rotation completed successfully"

              # Clean up
              rm -rf "$CERT_DIR"
            resources:
              limits:
                cpu: 100m
                memory: 128Mi
              requests:
                cpu: 50m
                memory: 64Mi
          # Keep completed jobs for debugging
          ttlSecondsAfterFinished: 86400  # 24 hours
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: linkerd-cert-rotation
  namespace: linkerd
  labels:
    {{- include "linkerd-control-plane.labels" . | nindent 4 }}
    component: certificate-rotation
  annotations:
    eks.amazonaws.com/role-arn: {{ .Values.certificates.rotation.serviceAccount.roleArn | quote }}
{{- end }}