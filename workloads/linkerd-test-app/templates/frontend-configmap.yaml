apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "linkerd-test-app.name" . }}-frontend-config
  namespace: {{ .Values.app.namespace }}
  labels:
    {{- include "linkerd-test-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
data:
  nginx.conf: |
    upstream backend {
        server {{ include "linkerd-test-app.name" . }}-backend:{{ .Values.backend.service.port }};
    }
    
    server {
        listen 80;
        server_name localhost;

        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        location /api/ {
            proxy_pass http://backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /health {
            return 200 'healthy\n';
            add_header Content-Type text/plain;
        }
    }
  
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Linkerd Test App - {{ .Values.environment | title }}</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            h1 { color: #2196F3; text-align: center; }
            .status { padding: 15px; margin: 20px 0; border-radius: 5px; }
            .success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
            .error { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
            .info { background: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; }
            button { background: #2196F3; color: white; border: none; padding: 12px 24px; border-radius: 5px; cursor: pointer; margin: 5px; }
            button:hover { background: #1976D2; }
            .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
            .metric-card { background: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; }
            .metric-value { font-size: 24px; font-weight: bold; color: #2196F3; }
            pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
            .linkerd-logo { text-align: center; margin: 20px 0; }
            .linkerd-logo::before { content: "üîó"; font-size: 48px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="linkerd-logo"></div>
            <h1>üîó Linkerd Service Mesh Test</h1>
            <div class="info status">
                <strong>Environment:</strong> {{ .Values.environment | title }}<br>
                <strong>Region:</strong> {{ .Values.region }}<br>
                <strong>Cluster:</strong> {{ .Values.cluster_name }}
            </div>

            <h2>Service Communication Test</h2>
            <p>This frontend service communicates with the backend through Linkerd's service mesh, demonstrating automatic mTLS encryption.</p>
            
            <div>
                <button onclick="testBackend()">Test Backend Connection</button>
                <button onclick="testHeaders()">Test Headers</button>
                <button onclick="testStatus()">Test Health Status</button>
                <button onclick="loadTest()">Run Load Test (10 requests)</button>
            </div>

            <div id="results"></div>

            <div class="metrics">
                <div class="metric-card">
                    <div class="metric-value" id="successCount">0</div>
                    <div>Successful Requests</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="errorCount">0</div>
                    <div>Failed Requests</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="avgLatency">0ms</div>
                    <div>Average Latency</div>
                </div>
            </div>

            <h3>üîí mTLS Security</h3>
            <div class="success status">
                <strong>‚úÖ Automatic mTLS:</strong> All communication between frontend and backend is automatically encrypted by Linkerd without any application changes.
            </div>

            <h3>üìä Observability</h3>
            <p>To view Linkerd metrics and traces:</p>
            <pre><code># Install Linkerd Viz (if not already installed)
linkerd viz install | kubectl apply -f -

# Open Linkerd dashboard
linkerd viz dashboard

# View live traffic
linkerd viz -n linkerd-test stat deploy
linkerd viz -n linkerd-test top deploy</code></pre>

            <h3>üß™ Testing Commands</h3>
            <pre><code># Test direct backend connection
kubectl exec -n linkerd-test deployment/linkerd-test-app-frontend -c nginx -- curl -s http://linkerd-test-app-backend:8080/status

# Check Linkerd proxy stats
kubectl exec -n linkerd-test deployment/linkerd-test-app-frontend -c linkerd-proxy -- curl -s http://127.0.0.1:4191/stats | grep backend

# Verify mTLS
linkerd viz -n linkerd-test edges deploy</code></pre>
        </div>

        <script>
            let successCount = 0;
            let errorCount = 0;
            let latencies = [];

            function updateMetrics() {
                document.getElementById('successCount').textContent = successCount;
                document.getElementById('errorCount').textContent = errorCount;
                const avgLatency = latencies.length > 0 ? Math.round(latencies.reduce((a, b) => a + b) / latencies.length) : 0;
                document.getElementById('avgLatency').textContent = avgLatency + 'ms';
            }

            function showResult(message, isSuccess = true, data = null) {
                const results = document.getElementById('results');
                const statusClass = isSuccess ? 'success' : 'error';
                let content = `<div class="${statusClass} status"><strong>${message}</strong>`;
                if (data) {
                    content += `<pre>${JSON.stringify(data, null, 2)}</pre>`;
                }
                content += '</div>';
                results.innerHTML = content;
            }

            async function makeRequest(url, description) {
                const startTime = Date.now();
                try {
                    const response = await fetch(url);
                    const latency = Date.now() - startTime;
                    latencies.push(latency);
                    
                    if (response.ok) {
                        successCount++;
                        const data = await response.json().catch(() => response.text());
                        showResult(`‚úÖ ${description} - Success (${latency}ms)`, true, data);
                    } else {
                        errorCount++;
                        showResult(`‚ùå ${description} - Failed (${response.status})`, false);
                    }
                } catch (error) {
                    errorCount++;
                    const latency = Date.now() - startTime;
                    latencies.push(latency);
                    showResult(`‚ùå ${description} - Error: ${error.message}`, false);
                }
                updateMetrics();
            }

            function testBackend() {
                makeRequest('/api/status', 'Backend Connection Test');
            }

            function testHeaders() {
                makeRequest('/api/headers', 'Headers Test');
            }

            function testStatus() {
                makeRequest('/api/status/200', 'Status Test');
            }

            async function loadTest() {
                showResult('üîÑ Running load test...', true);
                const promises = [];
                for (let i = 0; i < 10; i++) {
                    promises.push(makeRequest('/api/status', `Load Test Request ${i + 1}`));
                }
                await Promise.all(promises);
                showResult('‚úÖ Load test completed', true);
            }

            // Test backend connection on page load
            window.onload = function() {
                setTimeout(testBackend, 1000);
            };
        </script>
    </body>
    </html>
